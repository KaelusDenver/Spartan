$$HEADER$$
<title>Spartan in two minutes</title>
$$BODY$$

  <h1>Spartan in two minutes</h1>

  <p>Spartan is a complete <span class="strong">quality management system</span>
  that is optimized for production teams building and testing RF and micowave
  components.  It helps coordinate and control measurement data going
  into the system, and makes it easy to do
  interesting and useful things with the data once it's there.</p>

  <p><img class="sb" height="293" width="520" src="/help/images/twominutes1.png" /></p>

  <p>Spartan is a client-server based system, with most of the brains
  residing on a web server somewhere within your organization.  You access and use
  Spartan through a standard web browser.</p>


  <h2>Testing products and gathering the data</h2>

  <p>Spartan includes modules to communicate with test instrumentation
  and automate the process of measuring the products your company
  produces. The testing process is controlled through a flexible
  organization of sequential instructions called
  <a href="Gettingdataintothesystem.htm">test sequences</a>.  When
  you test a particular product, Spartan follows these predetermined
  test sequences to measure the various properties and performance
  parameters of the product.</p>

  <p><img class="sb" height="240" width="520"  src="/help/images/twominutes2.png" /></p>


  <p>The test sequences that Spartan follows are merely a combination
  of <a href="Teststepmodules.htm">test steps</a> which define
  the necessary instrumentation, measurements, configurations, and
  pass-fail criteria.  These steps and sequences
  are setup by you or other <a href="/help/Spartanusers.htm">
  Spartan users</a> and are maintained on the server for instant
  availability throughout the organization.</p>


  <h2>Where does the data go?</h2>

  <p>Spartan continuously streams the data it gathers from product
  testing into a central repository.  The data collected for each
  product can be tagged and supplemented with several additional
  <a href="/help/Testdatafields.htm">test data fields</a>
  which can be later used not only to identify the particular article,
  but to store attributes, conditions, or information which might be
  useful to understand the product's life cycle.</p>

  <p><img class="sb" height="293" width="520" src="/help/images/twominutes3.png" /></p>

  <p>A powerful <a href="/help/Gettinginformationoutofthesystem.htm">search
  engine</a> runs continuously on the server to index
  the stream of information coming from the
  <a href="/help/Teststationsandinstruments.htm">test
  stations</a> throughout the organization.</p>


  <h2>Mining the data</h2>

  <p>By indexing the data coming into the system, Spartan maintains
  a powerful means of providing access to the repository.  The data
  mining process is captured with the concept of
  <a href="/help/Gettinginformationoutofthesystem.htm">data mining
  scenarios</a>.
  Scenarios provide the means to:
  <ol class="lroman">
    <li>describe the data you would like to retrieve, and</li>
    <li>format and structure the presentation of the data</li>
  </ol>
  </p>

  <p><img class="sb" height="240" width="520" src="/help/images/twominutes4.png" /></p>


  <p>Just like about everything else in Spartan, data mining scenarios are set up
  and maintained on the server, so once created, they are available
  everywhere, instantly.</p>


  <h2>Pulling the pieces together</h2>

  <p>There are several components of the system that work to coordiate
  the functionality.  These components are all configurable through the
  same browser interface as Spartan, so system maintenance and management
  can happen from virtually anywhere.</p>

  <p><img class="sb" height="240" width="520" src="/help/images/twominutes5.png" /></p>

  <p>The system can be configured to allow
  <a href="/help/Spartanusers.htm">users</a> access only to
  specific parts of the system.  For example, one user
  might only be allowed to run test sequences while another could
  only gain access to manipulate test sequence definitions.</p>

  <p>If you've ever maintained an automated test system yourself, you
  know that one of the difficulties is writing and distributing the
  instrumentation drivers to the test stations.  Spartan takes care of
  this automatically by maintaining a list of the
  <a href="/help/Teststationsandinstruments.htm">
  test stations and instruments</a> on the system.</p>

  <p>Spartan uses templates within the data mining scenarios to provide
  a structured presentation of the data.
  <a href="/help/Dataminingtemplates.htm">Templates</a> are fully
  configurable from a web browser, or you can create your own.</p>

  <p>Finally, as mentioned above, the data stream flowing into Spartan
  can be tagged with special <a href="/help/Testdatafields.htm">fields</a>
  which can be used later during the
  data mining process.  Spartan provides several built-in fields and you
  can make as many more custom fields as you like.</p>

Next: <a href="/help/Gettingdataintothesystem.htm">Test sequences - data in</a>

</body>
</html>